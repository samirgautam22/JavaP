package com.project.grocery.controller;


import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.project.grocery.dto.StoreDto;
import com.project.grocery.request.PasswordEditRequest;
import com.project.grocery.request.StoreCreatationRequest;
import com.project.grocery.request.StoreEditRequest;
import com.project.grocery.responce.Responce;
import com.project.grocery.responce.StoreItems;
import com.project.grocery.responce.StoreResponceDto;
import com.project.grocery.service.StoreService;
import com.project.grocery.request.DistanceCreatation;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * @author:Samir Gautam
 * @Version:1.0
 * @Date:May 12, 2018
 * 
 */
@RestController
@RequestMapping(value="/api/v1/store")
public class StoreController {
	
	private static final Logger LOG = LoggerFactory.getLogger(StoreController.class);
	
	@Autowired
	private StoreService storeService;
	@ApiImplicitParams({
		@ApiImplicitParam(name="token",required=true,dataType="String",paramType="header")})
	@ApiOperation(value="Save Store",notes="Api to save store")
	@RequestMapping(method=RequestMethod.POST)
	public ResponseEntity<Object> saveStore(@RequestHeader Long loginId,@RequestHeader Long userId,
			@RequestBody StoreCreatationRequest storeCreatationRequest){
		LOG.debug("Request to Add store");
		storeService.saveStore(loginId,userId,storeCreatationRequest);
		Responce responce=new Responce("Store Created");
		return new ResponseEntity<Object>(responce,HttpStatus.CREATED);
		
	}
	@ApiImplicitParams({
		@ApiImplicitParam(name="token",required=true,dataType="String",paramType="header")})
	@ApiOperation(value="Delete Store",notes="Api to Delete Store")
	@RequestMapping(value="/{id}",method=RequestMethod.DELETE)
	public ResponseEntity<Object> deleteStore(@RequestHeader Long loginId,@RequestHeader Long userId,@PathVariable ("id") Long id){
		  LOG.debug("Store Delete Request");
		  storeService.deleteCustomer(loginId,userId,id);
			Responce responce=new Responce("Store Deleted");
		return new ResponseEntity<Object>(responce,HttpStatus.OK);
	}
	@ApiImplicitParams({
		@ApiImplicitParam(name="token",required=true,dataType="String",paramType="header")})
	@ApiOperation(value="Edit Store",notes="Api to Edit Store")
	@RequestMapping(value="/storeEdit",method=RequestMethod.PUT)
	public ResponseEntity<Object> editStore(@RequestHeader Long storeId,@RequestHeader Long loginId,@RequestBody StoreEditRequest storeEditRequest){
		LOG.debug("Request for Store Edit Accepted..");
		storeService.editStore(storeId,loginId,storeEditRequest);
		LOG.debug("Store Edited");
		Responce responce=new Responce("Store Edited");
		return new ResponseEntity<Object>(responce,HttpStatus.OK);
	}
	@ApiImplicitParams({
		@ApiImplicitParam(name="token",required=true,dataType="String",paramType="header")})
	@ApiOperation(value="List All Store",notes="Api to List All Store")
	@RequestMapping(method=RequestMethod.GET)
	public ResponseEntity<Object> listAllStore(@RequestHeader Long loginId){
		LOG.debug("List All Stores");
		List<StoreDto> store=storeService.listAllStores(loginId);		
		return new ResponseEntity<Object>(store,HttpStatus.OK);
	}
	@ApiImplicitParams({
		@ApiImplicitParam(name="token",required=true,dataType="String",paramType="header")})
	@ApiOperation(value="Get Store",notes="Api to get Store")
	@RequestMapping(value="/{storeId}",method=RequestMethod.GET)
	public ResponseEntity<Object> getStore(@RequestHeader Long loginId,@RequestHeader Long storeId){
		LOG.debug("Request Accepted to get store..");
		StoreResponceDto storeResponce=storeService.getStore(loginId,storeId); 
		return new ResponseEntity<Object>(storeResponce,HttpStatus.OK);
		
	}
	
	@RequestMapping(value="/getStore",method=RequestMethod.POST)
	public ResponseEntity<Object> getStoreByAddress(@RequestHeader Long loginId,
			@RequestHeader Long customerId,@RequestBody DistanceCreatation distanceCreatation){
		LOG.debug("Request Accepted to get store By Address..");
		List<StoreItems> addressresponce=storeService.getStoreAddress(loginId,customerId,distanceCreatation);
		return new ResponseEntity<Object>(addressresponce,HttpStatus.OK);
		
	}
	
	@ApiOperation(value="change password",notes="Api to change password")
	@ApiImplicitParams({
		@ApiImplicitParam(name="token",required=true,dataType="String",paramType="header")})
	@RequestMapping(value="/changePassword",method=RequestMethod.PUT)
	public ResponseEntity<Object> changePassword(@RequestHeader Long loginId,@RequestHeader Long storeId,
			@RequestBody PasswordEditRequest passwordEditRequest){
		LOG.debug("Request accepted to change password.");
		storeService.changePassword(loginId,storeId,passwordEditRequest);
		 Responce responce=new Responce("Password changed");
		return new ResponseEntity<Object>(responce,HttpStatus.OK);
		
	}

}
