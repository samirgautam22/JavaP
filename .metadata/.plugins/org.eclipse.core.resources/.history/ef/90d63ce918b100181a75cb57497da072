package com.project.grocery.service;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.project.grocery.exception.NotFoundException;
import com.project.grocery.model.Address;
import com.project.grocery.model.Customer;
import com.project.grocery.model.Items;
import com.project.grocery.model.Login;
import com.project.grocery.model.Order;
import com.project.grocery.model.Store;
import com.project.grocery.model.StoreAddress;
import com.project.grocery.repository.CustomerRepository;
import com.project.grocery.repository.ItemsRepository;
import com.project.grocery.repository.LoginRepository;
import com.project.grocery.repository.OrderRepository;
import com.project.grocery.repository.StoreRepository;
import com.project.grocery.request.OrderCreatationRequest;
import com.project.grocery.request.SearchRequest;
import com.project.grocery.responce.AddressResponceDto;
import com.project.grocery.responce.CustomerOrderResponce;
import com.project.grocery.responce.OrderResponceDto;
import com.project.grocery.responce.StoreAddressResponce;
import com.project.grocery.responce.StoreOrderResponce;
import com.project.grocery.util.Base64Util;
import com.project.grocery.util.LoginStatus;
import com.project.grocery.util.OrderStatus;
import com.project.grocery.util.Status;

/**
 * @author:Samir Gautam
 * @Version:1.0
 * @Date:May 13, 2018
 * 
 */
@Service
public class OrderService {

	private static final Logger LOG = LoggerFactory.getLogger(OrderService.class);

	@Autowired
	CustomerRepository customerRepository;

	@Autowired
	OrderRepository orderRepository;
	
	@Autowired
	StoreRepository storeRepository;

	@Autowired
	LoginRepository loginRepository;
	
	@Autowired
	ItemsRepository itemRepository;
	/**
	 * @param customerId
	 * @param orderRequest
	 */
	public Order saveOrder(Long loginId,Long customerId,OrderCreatationRequest orderRequest) {
		LOG.debug("Request Accepted to Save order ");
		System.out.println("items Id");
		System.out.println(orderRequest.getItemsId());
		Long counter=(long) 1;
		Long item=(long) 0;
		Login login =loginRepository.findByIdAndLoginStatusNot(loginId, LoginStatus.LOGOUT);
		if(login==null) {
			throw new NotFoundException("Please Login to continue");
		}
		
		Customer customer = customerRepository.findCustomerByIdAndStatusNot(customerId, Status.DELETE);
		if (customer == null) {
			throw new NotFoundException("Customer Not Found");
		}
		
		Order o=orderRepository.findOrderByOrderNameAndCustomerAndOrderStatusNot(orderRequest.getOrderName(),
				new Customer(customerId),OrderStatus.DELETE);
		
		if(o!=null) {
			item=o.getItem();
			item=item+counter;
			o.setItem(item);
			orderRepository.save(o);
			return o;
		}
		
		Items it=itemRepository.findItemsById(orderRequest.getItemsId());
		if(it==null) {
			throw new NotFoundException("Item Doesnot exit");
		}
		Order order = new Order();
		order.setOrderDate(new Date());
		order.setCustomer(customer);
		order.setPrice(orderRequest.getPrice());
		order.setItem(counter);
		
		
		
		if (it.getItemsPicture()!= null) {
			File file = new File(it.getItemsPicture());
			try {
				order.setImageUrl(Base64Util.encodeFileToBase64Binary(file));
			} catch (IOException e) {
				e.printStackTrace();
			} 
		}
		
		order.setOrderName(it.getItemName());
//		order.setTotalPrice(orderRequest.getPrice()*orderRequest.getItem());
		order.setOrderStatus(OrderStatus.AVIALIABLE);
		order.setItemsId(orderRequest.getItemsId());
		order.setCustomer(new Customer(customerId));
		orderRepository.save(order);
		LOG.debug("The customer order has been set");
		return order;
	}

	/**
	 * @return 
	 * 
	 */
	public List<OrderResponceDto> listAllOrderAvaliable(Long loginId) {
		LOG.debug("Request Accepted to List All order");
		List<Order> order= orderRepository.findOrderByOrderStatusNotAndOrderStatusNot(OrderStatus.DELIVERED,OrderStatus.DELETE);
		List<OrderResponceDto> orderResponce=new ArrayList<>();
		order.stream().forEach(u->{
			Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
			if(c==null) {
				throw new NotFoundException("Customer Not found");
			}
//			Store s=storeRepository.findStoreById(u.getStore().getId());
//			if(s==null) {
//			throw new NotFoundException("Store Not found");
//			}
			OrderResponceDto responceDto=new OrderResponceDto();
			responceDto.setId(u.getId());
			responceDto.setItem(u.getItem());
			responceDto.setOrderName(u.getOrderName());
			responceDto.setOrderDate(u.getOrderDate());
			responceDto.setPrice(u.getPrice());
			responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
			responceDto.getOrderBy();
			
			List<AddressResponceDto> adddresss=new ArrayList<>();
			List<Address> add=c.getAddress();
			if (add != null) {
				add.stream().forEach(a -> {
					AddressResponceDto dd = new AddressResponceDto();
					dd.setId(a.getId());
					dd.setDistrict(a.getDistrict());
					dd.setState(a.getState());
					dd.setLocalLavel(a.getLocalLavel());
					adddresss.add(dd);
				});
			}
			
			responceDto.setAddress(adddresss);
			
//			List<StoreAddressResponce> adddres=new ArrayList<>();
//			List<StoreAddress> adds=s.getStoreAddress();
//			if (adds != null) {
//				adds.stream().forEach(a -> {
//					StoreAddressResponce dd = new StoreAddressResponce();
//					dd.setId(a.getId());
//					dd.setDistrict(a.getDistrict());
//					dd.setState(a.getState());
//					dd.setLocalLavel(a.getLocalLavel());
//					adddres.add(dd);
//				});
//			}
//			responceDto.setStore(adddres);
			orderResponce.add(responceDto);
	
			
		});
		LOG.debug("The order is obtain");
		return orderResponce;
		
	}

	/**
	 * @param storeId
	 * @return
	 */
	public List<StoreOrderResponce> listAllAvaliablOrderByStore(Long loginId,Long storeId) {
		LOG.debug("List All Item in Store");
		List<StoreOrderResponce> orderResponces=new ArrayList<>();
		Store store=storeRepository.findStoreById(storeId);
	
		if(store==null) {
			throw new NotFoundException("Store not found");
		}
		
		
		List<Order> order=orderRepository.findOrderByStoreAndOrderStatus(store,OrderStatus.AVIALIABLE);
		
		if(order==null) {
			throw new NotFoundException("Order Not Avaliable in your store");
		}
		
		
		order.stream().forEach(u->{
			StoreOrderResponce orderResponceDto=new StoreOrderResponce();
			System.out.println(u.getOrderName());
			orderResponceDto.setId(u.getId());
			orderResponceDto.setOrderName(u.getOrderName());
			orderResponceDto.setItem(u.getItem());
			orderResponceDto.setOrderDate(u.getOrderDate());
			orderResponceDto.setPrice(u.getPrice());
			orderResponceDto.setTotalPrice(u.getPrice()*u.getItem());
			orderResponceDto.setOrderBy(u.getCustomer().getFirstName()+" "+u.getCustomer().getLastName());
			
			
			List<AddressResponceDto> addressResponceDtos=new ArrayList<>();
			List<Address> addresses=u.getCustomer().getAddress();
			if(addresses!=null) {
				addresses.stream().forEach(a->{
					AddressResponceDto dto=new AddressResponceDto();
					dto.setId(u.getId());
					dto.setState(a.getState());
					dto.setDistrict(a.getDistrict());
					dto.setLocalLavel(a.getLocalLavel());
					addressResponceDtos.add(dto);
					
				});
			}
			orderResponceDto.setAddress(addressResponceDtos);
			orderResponces.add(orderResponceDto);
		});
		LOG.debug("List of all Avaliable order");
		return orderResponces;
	}
	
	
	public List<StoreOrderResponce> deliverOrderByStore(Long loginId,Long storeId) {
		LOG.debug("List All Deliver Item by Store");
		List<StoreOrderResponce> orderResponces=new ArrayList<>();
		Store store=storeRepository.findStoreById(storeId);
	
		if(store==null) {
			throw new NotFoundException("Store not found");
		}
		
		
		List<Order> order=orderRepository.findOrderByStoreAndOrderStatus(store,OrderStatus.DELIVERED);
		
		if(order==null) {
			throw new NotFoundException("Order Not Avaliable in your store");
		}
		
		
		order.stream().forEach(u->{
			StoreOrderResponce orderResponceDto=new StoreOrderResponce();
			System.out.println(u.getOrderName());
			orderResponceDto.setId(u.getId());
			orderResponceDto.setOrderName(u.getOrderName());
			orderResponceDto.setItem(u.getItem());
			orderResponceDto.setOrderDate(u.getOrderDate());
			orderResponceDto.setPrice(u.getPrice());
			orderResponceDto.setTotalPrice(u.getPrice()*u.getItem());
			orderResponceDto.setOrderBy(u.getCustomer().getFirstName()+" "+u.getCustomer().getLastName());
			
			
			List<AddressResponceDto> addressResponceDtos=new ArrayList<>();
			List<Address> addresses=u.getCustomer().getAddress();
			if(addresses!=null) {
				addresses.stream().forEach(a->{
					AddressResponceDto dto=new AddressResponceDto();
					dto.setId(u.getId());
					dto.setState(a.getState());
					dto.setDistrict(a.getDistrict());
					dto.setLocalLavel(a.getLocalLavel());
					addressResponceDtos.add(dto);
					
				});
			}
			orderResponceDto.setAddress(addressResponceDtos);
			orderResponces.add(orderResponceDto);
		});
		LOG.debug("List of all Avaliable order");
		return orderResponces;
	}
	
	
	public List<OrderResponceDto> listAllDeliveredOrder(Long loginId) {
		LOG.debug("Request Accepted to List All order");
		List<Order> order= orderRepository.findOrderByOrderStatusNotAndOrderStatusNot(OrderStatus.AVIALIABLE,OrderStatus.DELETE);
		List<OrderResponceDto> orderResponce=new ArrayList<>();
		order.stream().forEach(u->{
			Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
			if(c==null) {
				throw new NotFoundException("Customer Not found");
			}
			Store s=storeRepository.findStoreById(u.getStore().getId());
			if(s==null) {
				throw new NotFoundException("Store Not found");
			}
			OrderResponceDto responceDto=new OrderResponceDto();
			responceDto.setId(u.getId());
			responceDto.setItem(u.getItem());
			responceDto.setOrderName(u.getOrderName());
			responceDto.setOrderDate(u.getOrderDate());
			responceDto.setPrice(u.getPrice());
			responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
			responceDto.getOrderBy();
			
			List<AddressResponceDto> adddresss=new ArrayList<>();
			List<Address> add=c.getAddress();
			if (add != null) {
				add.stream().forEach(a -> {
					AddressResponceDto dd = new AddressResponceDto();
					dd.setId(a.getId());
					dd.setDistrict(a.getDistrict());
					dd.setState(a.getState());
					dd.setLocalLavel(a.getLocalLavel());
					adddresss.add(dd);
				});
			}
			
			responceDto.setAddress(adddresss);
			
			List<StoreAddressResponce> adddres=new ArrayList<>();
			List<StoreAddress> adds=s.getStoreAddress();
			if (adds != null) {
				adds.stream().forEach(a -> {
					StoreAddressResponce dd = new StoreAddressResponce();
					dd.setId(a.getId());
					dd.setDistrict(a.getDistrict());
					dd.setState(a.getState());
					dd.setLocalLavel(a.getLocalLavel());
					adddres.add(dd);
				});
			}
			responceDto.setStore(adddres);
			orderResponce.add(responceDto);
	
			
		});
		LOG.debug("The order is obtain");
		return orderResponce;
		
	}

	/**
	 * @param orderId
	 */
	@Transactional
	public void deleteOrder(Long id,Long loginId) {
		LOG.debug("Request Accepted to Delete order");
		Order order=orderRepository.findOrderByIdAndOrderStatusNot(id,OrderStatus.DELETE);
		if(order==null) {
			throw new NotFoundException("Order not found");
		}
		order.setOrderStatus(OrderStatus.DELETE);
		orderRepository.save(order);
		LOG.debug("Order Deleted");
	}

	/**
	 * @param loginId
	 * @param customerId
	 * @return
	 */
	public List<CustomerOrderResponce> listAllCustomerOrder(Long loginId, Long customerId) {
		
		Login l=loginRepository.findByIdAndLoginStatusNot(loginId, LoginStatus.LOGOUT);
		if(l==null) {
			throw new NotFoundException("Please Login");
		}
		
		List<Order> order=orderRepository.findAllOrderByCustomerAndOrderStatusNotAndOrderStatusNot(new Customer(customerId),OrderStatus.DELIVERED,OrderStatus.DELETE);
		List<CustomerOrderResponce>  responceDtos=new ArrayList<>();
		order.stream().forEach(u->{
			CustomerOrderResponce dto=new CustomerOrderResponce();
			dto.setId(u.getId());
			dto.setOrderName(u.getOrderName());
			dto.setItem(u.getItem());
//			dto.setImageUrl(imageUrl);
			responceDtos.add(dto);
		});
		
		return responceDtos;
	}

	/**
	 * @param loginId
	 * @return
	 */
	public List<OrderResponceDto> listAllOrderDeliver(Long loginId) {
		LOG.debug("Request Accepted to List All order");
		List<Order> order= orderRepository.findOrderByOrderStatusNotAndOrderStatusNot(OrderStatus.AVIALIABLE,OrderStatus.DELETE);
		List<OrderResponceDto> orderResponce=new ArrayList<>();
		order.stream().forEach(u->{
			Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
			if(c==null) {
				throw new NotFoundException("Customer Not found");
			}
			Store s=storeRepository.findStoreById(u.getStore().getId());
			if(s==null) {
				throw new NotFoundException("Store Not found");
			}
			OrderResponceDto responceDto=new OrderResponceDto();
			responceDto.setId(u.getId());
			responceDto.setItem(u.getItem());
			responceDto.setOrderName(u.getOrderName());
			responceDto.setOrderDate(u.getOrderDate());
			responceDto.setPrice(u.getPrice());
			responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
			responceDto.getOrderBy();
			
			List<AddressResponceDto> adddresss=new ArrayList<>();
			List<Address> add=c.getAddress();
			if (add != null) {
				add.stream().forEach(a -> {
					AddressResponceDto dd = new AddressResponceDto();
					dd.setId(a.getId());
					dd.setDistrict(a.getDistrict());
					dd.setState(a.getState());
					dd.setLocalLavel(a.getLocalLavel());
					adddresss.add(dd);
				});
			}
			
			responceDto.setAddress(adddresss);
			
			List<StoreAddressResponce> adddres=new ArrayList<>();
			List<StoreAddress> adds=s.getStoreAddress();
			if (adds != null) {
				adds.stream().forEach(a -> {
					StoreAddressResponce dd = new StoreAddressResponce();
					dd.setId(a.getId());
					dd.setDistrict(a.getDistrict());
					dd.setState(a.getState());
					dd.setLocalLavel(a.getLocalLavel());
					adddres.add(dd);
				});
			}
			responceDto.setStore(adddres);
			orderResponce.add(responceDto);
	
			
		});
		LOG.debug("The order is obtain");
		return orderResponce;
	}

	/**
	 * @param loginId
	 * @param searchRequest
	 * @throws ParseException 
	 */
	public List<OrderResponceDto> searchAvalibleOrder(Long loginId, SearchRequest searchRequest)  {
		
		LOG.debug("Request Accepted to List All order");
		List<OrderResponceDto> orderResponce=new ArrayList<>();
		
		try {
			Date date1=new SimpleDateFormat("yyyy-MM-dd").parse(searchRequest.getDate());
			System.out.println(date1);
			List<Order> order= orderRepository.findOrderByOrderStatusNotAndOrderDate(OrderStatus.DELIVERED,date1);
			order.stream().forEach(u->{
				Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
				if(c==null) {
					throw new NotFoundException("Customer Not found");
				}
				OrderResponceDto responceDto=new OrderResponceDto();
				responceDto.setId(u.getId());
				responceDto.setItem(u.getItem());
				responceDto.setOrderName(u.getOrderName());
				responceDto.setOrderDate(u.getOrderDate());
				responceDto.setPrice(u.getPrice());
				responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
				responceDto.getOrderBy();
				

				orderResponce.add(responceDto);

				
			});
		
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		LOG.debug("The order is obtain");
		return orderResponce;    	
		
	}
	
	/**
	 * @param loginId
	 * @param searchRequest
	 * @throws ParseException 
	 */
	@Transactional
	public List<OrderResponceDto> searchDeliverOrder(Long loginId, SearchRequest searchRequest)  {
		
		
		List<OrderResponceDto> orderResponce=new ArrayList<>();
		
		try {
			Date date1=new SimpleDateFormat("yyyy-MM-dd").parse(searchRequest.getDate());
			System.out.println(date1);
			List<Order> order= orderRepository.findOrderByOrderStatusNotAndOrderDate(OrderStatus.AVIALIABLE,date1);
			order.stream().forEach(u->{
				Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
				if(c==null) {
					throw new NotFoundException("Customer Not found");
				}
				OrderResponceDto responceDto=new OrderResponceDto();
				responceDto.setId(u.getId());
				responceDto.setItem(u.getItem());
				responceDto.setOrderName(u.getOrderName());
				responceDto.setOrderDate(u.getOrderDate());
				responceDto.setPrice(u.getPrice());
				responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
				responceDto.getOrderBy();
				
				List<AddressResponceDto> adddresss=new ArrayList<>();
				List<Address> add=c.getAddress();
				if (add != null) {
					add.stream().forEach(a -> {
						AddressResponceDto dd = new AddressResponceDto();
						dd.setId(a.getId());
						dd.setDistrict(a.getDistrict());
						dd.setState(a.getState());
						dd.setLocalLavel(a.getLocalLavel());
						adddresss.add(dd);
					});
				}
				
			
				orderResponce.add(responceDto);

				
			});
		
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		LOG.debug("The order is obtain");
		return orderResponce;    	
		
	}

	/**
	 * @param loginId
	 * @param storeId
	 * @param changeStatus
	 */
	@Transactional
	public void changeStatus(Long loginId, Long storeId, Long id) {
		
		Login login=loginRepository.findLoginById(loginId);
		if(login==null) {
			throw new NotFoundException("Please Login");
		}
		
		Order order=orderRepository.findOrderByIdAndOrderStatusNot(id, OrderStatus.DELIVERED);
		order.setOrderStatus(OrderStatus.DELIVERED);
		orderRepository.save(order);
		
	}

	/**
	 * @param storeId
	 * @param loginId
	 * @param searchRequest
	 * @return
	 */
	@Transactional
	public List<OrderResponceDto> searchStoreDeliverOrderByDate(Long storeId, Long loginId,
			SearchRequest searchRequest) {
		LOG.debug("Request Accepted to List All order");
		Store store=storeRepository.findStoreById(storeId);
		
		List<OrderResponceDto> orderResponce=new ArrayList<>();
		if(store==null) {
			throw new NotFoundException("Store not found");
		}
		
		try {
			Date date1=new SimpleDateFormat("yyyy-MM-dd").parse(searchRequest.getDate());
			System.out.println(date1);
			List<Order> order= orderRepository.findAllOrderByStoreAndOrderDateAndOrderStatus(store,date1,OrderStatus.DELIVERED);
			System.out.println(order.size());
			order.stream().forEach(u->{
				Store s=storeRepository.findStoreById(u.getStore().getId());
				if(s==null) {
					throw new NotFoundException("Customer Not found");
				}
				
				Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
				OrderResponceDto responceDto=new OrderResponceDto();
				responceDto.setId(u.getId());
				responceDto.setItem(u.getItem());
				responceDto.setOrderName(u.getOrderName());
				responceDto.setOrderDate(u.getOrderDate());
				responceDto.setPrice(u.getPrice());
				responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
				responceDto.getOrderBy();			
				orderResponce.add(responceDto);

				
			});
		
			
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		LOG.debug("The order is obtain");
		return orderResponce;    	
	}
	/**
	 * @param storeId
	 * @param loginId
	 * @param searchRequest
	 * @return
	 */
	@Transactional
	public List<OrderResponceDto> searchStoreAvaliableOrderByDate(Long storeId, Long loginId,
			SearchRequest searchRequest) {
	 
			LOG.debug("Request Accepted to List All order");
			List<OrderResponceDto> orderResponce=new ArrayList<>();
			Store store=storeRepository.findStoreById(storeId);
			
			try {
				Date date1=new SimpleDateFormat("yyyy-MM-dd").parse(searchRequest.getDate());
				System.out.println(date1);
				List<Order> order= orderRepository.findAllOrderByStoreAndOrderDateAndOrderStatus(store,date1,OrderStatus.AVIALIABLE);
				order.stream().forEach(u->{
					Store s=storeRepository.findStoreById(u.getStore().getId());
					if(s==null) {
						throw new NotFoundException("Customer Not found");
					}
					
					Customer c=customerRepository.findCustomerById(u.getCustomer().getId());
					OrderResponceDto responceDto=new OrderResponceDto();
					responceDto.setId(u.getId());
					responceDto.setItem(u.getItem());
					responceDto.setOrderName(u.getOrderName());
					responceDto.setOrderDate(u.getOrderDate());
					responceDto.setPrice(u.getPrice());
					responceDto.setOrderBy(c.getFirstName()+" "+c.getLastName());
					responceDto.getOrderBy();
									
					orderResponce.add(responceDto);

					
				});
			
				
			} catch (ParseException e) {
				e.printStackTrace();
			}
			
			LOG.debug("The order is obtain");
			return orderResponce;    	
	}
}
